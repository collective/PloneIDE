[buildout]
parts =
    instance
    zopepy
    omelette
    ploneide

extensions =
    mr.developer

# Change the number here to change the version of Plone being used
extends =
    http://download.zope.org/Zope2/index/2.12.3/versions.cfg
    http://dist.plone.org/release/4.0.2/versions.cfg

versions = versions


# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.0.2
    http://dist.plone.org/thirdparty

# Add additional eggs here
eggs =
#     collective.recipe.ploneide
#     collective.ploneide
#     sauna.reload

# mr.developer settings to always checkout all eggs and force them
# to update
auto-checkout = *
always-checkout = force

[sources]
collective.ploneide = git git@github.com:frapell/collective.ploneide.git
collective.recipe.ploneide = git git@github.com:frapell/collective.recipe.ploneide.git
sauna.reload = git git@github.com:collective/sauna.reload.git

[instance]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2instance
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = on
verbose-security = on
blob-storage = var/blobstorage
# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs =
    PILwoTk
    Zope2
    Plone
    ${buildout:eggs}

environment-vars =
    zope_i18n_compile_mo_files true

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =

products =

[zopepy]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/zc.recipe.egg
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

[ploneide]
recipe = collective.recipe.ploneide

# XXX: Why is this needed ?
# [ploneide-develop]
# recipe = zc.recipe.egg
# eggs =
#     TornadIO
#     collective.ploneide
# entry-points = ploneide=collective.ploneide.ploneide.main:main
